import { PDFViewer,Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer/lib/react-pdf.browser.es.js';
// import { pdfjs } from "react-pdf";
import {doc,getDoc,getDocs,onSnapshot,query,where,collection} from "firebase/firestore";
import { auth, db, storage } from '../Context/firebase';
import { useEffect, useState } from 'react';
import {ref,getDownloadURL} from 'firebase/storage'; 
import { useAuthState } from "react-firebase-hooks/auth";
import './book.css';
import Logo from "../../Images/logo_round_orange.png";
import { useNavigate } from 'react-router-dom';
import { Image } from 'react-bootstrap';
//import PDFDocument from '@react-pdf/pdfkit';

const styles = StyleSheet.create({
    // page: {
    //   flexDirection: 'row',
    //   backgroundColor: '#E4E4E4'
    // },
    // section: {
    //   margin: 10,
    //   padding: 10,
    //   flexGrow: 1
    // },
    title:{
      color:"tomato",
    },
    content:{
      fontSize:"18px",
      display:"block",
      listType:"number",
      flexDirection: 'column',
      width: 200
    },
    // img:{
    //    height:"200px",
    //   width:"200px",
    //   // backgroundColor:"pink",
    //   display:"inline",
    // },
    page: {
      backgroundColor:"white",
      color: "black",
    },
    section: {
      margin: "5px",
      padding: "5px",
      // flexGrow: 1,  
      display:"block",
    },
    viewer: {
      width: window.innerWidth, //the pdf viewer will take up all of the width and height
      height: window.innerHeight,
    },
  });

function Book(props){
  
    const [recipe_infos,setRecipe_infos]=useState([]);
    const navigate = useNavigate();
  
    const [user, loading] = useAuthState(auth);
    let [userid, setUserid] = useState("");
    const [pathh,setPathh]=useState("");

    const [name,setName]=useState("");
    const [category,setCategory]=useState("");
    const [cooktime,setCooktime]=useState("");
    const [preptime,setPreptime]=useState("");
    const [ings,setIngs]=useState([]);
    const [steps,setSteps]=useState([]);
    const [url,setUrl]=useState("") 

    const [userecipebooks,setUserecipebooks]=useState([]);
    const [imageDataURL, setImageDataURL] = useState(null);
    const [userecipes,setUserecipes]=useState([]);


    const fetchUserId = async () => {
    try {
        const q = query(collection(db, "LoginData"), where("uid", "==", user?.uid));
        let docSnap = await getDocs(q); 
        docSnap.forEach((doc1) => {
            // doc.data() is never undefined for query doc snapshots
            console.log("ID="+ doc1.id, " => ", doc1.data());
            if(userid !==doc1.id || userid === "")
            {
              setUserid(doc1.id); 
              setPathh(`LoginData/${doc1.id}`);
            }
            // us=doc.id;
            ///Recipes_user`); 
            // setPathh(`LoginData/${doc.id}/Recipes_user`); 
        });
        // alert(props.urecipeId[0]);
        // if(props.recipeId)  fetchUserRecipeBook();
      } catch (err) {
          console.error(err);
          alert("An error occured while fetching userid data");
    };
  }
   

    const fetchRecipe = async (category_name) => {
        try 
        {
          const docRef = query(collection(db, "Recipes"), where ("category", "==", category_name));
          // doc(db, "Recipes");
          const docSnap = await getDocs(docRef);
          docSnap.forEach((doc) => {
            console.log(doc.id);
            // const rcoll=(collection(db,"Recipes"), where ("category", "==", category_name));
            onSnapshot(docRef,snapshot=>{
              setRecipe_infos(snapshot.docs.map(doc1 =>{
                  return {
                      id:doc1.id,
                      // viewing:false,
                      ...doc1.data()
                  } 
              }))
            }); 
        })
      }catch(err){
          console.error(err);
          alert("An error occured while fetching recipe data");
        }
    };
  //   const fetchUserRecipe = async () => {
  //     try 
  //     {
  //       // alert(userid);
  //       const docRef = query(collection(db, `LoginData/${userid}/Recipes_user`));
  //       //, where ("category", "==", category_name));
  //       // doc(db, "Recipes");
  //       const docSnap = await getDocs(docRef);
  //       docSnap.forEach((doc) => {
  //         console.log(doc.id);
  //         // const rcoll=(collection(db,"Recipes"), where ("category", "==", category_name));
  //         onSnapshot(docRef,snapshot=>{
  //           setUserecipes(snapshot.docs.map(doc1 =>{
  //               return {
  //                   id:doc1.id,
  //                   // viewing:false,
  //                   ...doc1.data()
  //               } 
  //           }))
  //         }); 
  //     })
  //   }catch(err){
  //       console.error(err);
  //       alert("An error occured while fetching user recipe data");
  //     }
  // };
  

  //   {name:"",
  //   category:"",
  //   cookTime:"",
  //   prepTime:"",
  //   ingredients:[""],
  //   steps:[""],
  // }
  // ]);
  // let userecipebooks=[];

  const fetchUserRecipeBook = async () => 
  {
    try 
    {
      let recipeidRef="",docsnap2="";
      // let userecipebooks=[];
      // let ridd=props.recipeId;
      // alert("pathh= "+pathh)
      // alert("props.recipeId = "+props.recipeId[0])
      let recipe_ids=props.recipeId;
      recipe_ids=recipe_ids.toString();
      recipe_ids=recipe_ids.split(',');
      // alert("recipe_ids.length = "+recipe_ids.length)
      // userecipebooks=[];
      if(props.recipeId)
      {
        let docSnap2="";
        var i;
        let ingredients="";
        let flag=0;
          // recipe_ids.map((recipe_id,i)=>
          // ({
        for(i=0;i<recipe_ids.length; i++)
        {   
          // {alert("recipe_id= "+recipe_ids[i])}
          recipeidRef = doc(db,pathh+`/Recipes_user`,recipe_ids[i]);
          docSnap2 = await getDoc(recipeidRef);
          // alert('ing = '+docSnap2.get('ingredients'));
          if(docSnap2.exists())
          {
            // for(i=0;i<userecipebooks.length;i++)
            // {
            //     if(userecipebooks[i].name===docSnap2.get('name'))
            //     {  alert("Matchedd");
            //       // flag=1;
            //     // continue;
            //      }
            // }
            alert("Adding in userecipebooks: "+docSnap2.get('name'));
            // setUserecipebooks(docSnap2.data());
            // (arr => [...arr, `${arr.length}`]);
            // setUserecipebooks( arr =>{
            //   return {
            //     ...arr,
            //     ...docSnap2.data()
            //   // name:docSnap2.get('name')
            // }             
            // }) 
            // if(flag===0)
            // {    
              userecipebooks.push(
              {
                name:docSnap2.get('name'),
                category:docSnap2.get('category'),
                cooktime:docSnap2.get('cookTime'),
                preptime:docSnap2.get('prepTime')
              }) // name:docSnap2.get('name')});
              // setUserecipes(userecipebooks);
              alert('i= '+i+' name = '+userecipebooks[i].name);
            // }
          }
          // alert('after setIng = '+ing);
          // else {  alert("Can't find the document.");   }
        }
          // )
        //   )
        // }  
      }
        // setUserecipebooks({name:docsnap.get('name'),
        // category:docsnap.get('category')});
        // })
    {alert('length = '+userecipebooks.length)}
      
  }catch(err){
      console.error(err);
      alert("An error occured while fetching user recipe data");
    }
}

   useEffect(() => {
            if (loading) return;
            if (!user) return navigate("/");
            fetchUserId();
            // fetchRecipe("Dessert");
            // if(userid) 
            // fetchUserRecipe();

    }, [user, loading,]);
    useEffect(()=>{
      if(props.recipeId)  fetchUserRecipeBook();
    })
    // useEffect(()=>{
    //   // fetchUserRecipeBook();
    //   // alert("urecipe ID = "+props.urecipeId);
    //   if(props.recipeId) 
    //   fetchUserRecipeBook();
    // },[props.recipeId]);

  // useEffect(() => {
  //   // const storageRef = firebase.storage().ref();
  //   const imageRef = ref(storage, 'images/bg1.jpg');
  //   // storageRef.child('path/to/image.jpg');
  //   getDownloadURL(ref(storage, 'images/bg1.jpg')).then((url) => {
  //     const xhr = new XMLHttpRequest();
  //     xhr.responseType = 'blob';
  //     xhr.onload = () => {
  //       const reader = new FileReader();
  //       reader.onloadend = () => {
  //         setImageDataURL(reader.result);
  //       };
  //       reader.readAsDataURL(xhr.response);
  //     };
  //     xhr.open('GET', url);
     
  //     xhr.send();
  //   });
  //   console.log("URL = "+imageDataURL);
  // }, []);

    return (
      <>  

    {/* {alert('lengthhh='+userecipebooks.length)} */}

    <PDFViewer style={styles.viewer} >
      <Document 
      // title="myPdf"
      title={props.title}
      >
      {/* {recipe_infos.map((recipe_info,i)=>(
      <>
        <Page size="A4" style={styles.page}>
        
            <View style={styles.section} key={recipe_info.id}>
              <Text style={styles.title}> Title: {recipe_info.name}</Text>
              <Text>Category: {recipe_info.category}</Text>
            </View>
          
            <View style={styles.section}>
              <Text>Ingregients:</Text>
            <Text style={styles.content}>
              {recipe_info.ingredients}</Text>
            </View>
            <View style={styles.section}>
            <Text style={styles.content}>Steps: </Text>
            <Text> {recipe_info.steps}</Text>
            </View>
           
      </Page>
      </>
          ))} */}
      {/* {userecipes.map((userrecipe,i)=>(
      <>
        <Page size="A4" style={styles.page}>
        
            <View style={styles.section} key={userrecipe.id}>
              <Text style={styles.title}> Title: {userrecipe.name}</Text>
              <Text>Category: {userrecipe.category}</Text>
            </View>
          
            <View style={styles.section}>
              <Text>Ingregients:</Text>
            <Text style={styles.content}>
              {userrecipe.ingredients}</Text>
            </View>
            <View style={styles.section}>
            <Text style={styles.content}>Steps: </Text>
            <Text> {userrecipe.steps}</Text>
            </View>
           
      </Page>
      </>
          ))} */}

    {/* {userecipebooks.map((userecipebook,i)=>( */}
{/* {alert(Array.isArray(userecipebooks))} */}
    {alert('l='+userecipebooks.length)}
    {/* {alert("in pdf = "+userecipebooks[0].name)} */}

    
    {(props.recipeId)?
    (
      // {recipe_infos.map((recipe_info,i)=>(
     (userecipebooks.length>0) ? (userecipebooks.map((u)=> 
      (
      <>
    {alert('lengtttth = '+userecipebooks.length)}
        <Page size="A4" style={styles.page}>
            <View 
            style={styles.section} 
            // key={userecipebooks.id}
            >
              <Text style={styles.title}> 
              Title: 
              {u.name}
              </Text>
              </View>
            <View style={styles.section}>
              <Text>Category: 
                {/* {userecipebooks.category} */}
                {u.category}
              </Text>
          {/*             
            <Text>Cooking Time: 
                {u.cooktime}
              </Text>
            {/* </View>
            <View> 
            <Text>Preparation Time: 
            
                {u.preptime}
              </Text>
            </View>
          
            <View style={styles.section}>
              <Text>Ingregients:</Text>
              <Text style={styles.content}>
              {/* {ings.map((ing,i)=>(
                <li key={i}>
                    {ing}
                </li>
              ))} 
      
              </Text>
            </View>
            <View style={styles.section}>
            <Text style={styles.content}>Steps: 
              <Text><ol>
                {steps.map((step,i)=>(
                    <li key={i}>{step}</li>
                ))}
              </ol> 
              </Text>
            </Text> */}
            {/* <Text> {userecipebooks.steps}</Text> */}
            </View>
           
      </Page>
      </>
      ))):(<></>)
      ):(<></>)}
    {/* ))} */}
    </Document> 
    </PDFViewer>
    </>
    );
  }
export default Book;


{/* <p>Image from imagedata url</p>
      <img  style={styles.img} src={imageDataURL} alt=""/>
      <p>Image from local storage</p>

      <img  style={styles.img} src={Logo} alt=""/> */}
      {/* const doc = new PDFDocument();
      doc.image(imageDataURL, {
        fit: [250, 250],
        align: 'center',
        valign: 'center'
      }); */}


{/* <Text>{recipe_info.url}</Text> */}

            {/* <Image cache={false} style={styles.img} src="https://firebasestorage.googleapis.com/v0/b/cookbook-755f8.appspot.com/o/cheesecake.jpg"/>
            {{uri:recipe_info.url}}
            {{uri:"https://firebasestorage.googleapis.com/v0/b/cookbook-755f8.appspot.com/o/cheesecake.jpg?alt=media&token=57e16400-01a7-4a00-9405-e2e73eae7383"}}
            {recipe_info.imgurl}
            {Logo} */}
            {/* {ImageUrl[i]} */}

{/* <Page>
      <Image style={styles.img} src={Logo}/>
      <img  style={styles.img} src={Logo} alt=""/>

      <View style={styles.section}>
        <img  style={styles.img} src={imageDataURL} alt="image"/>
        <Text>Image from local storage </Text>
        <Image style={styles.img} src={Logo}/>
        <Text>Image from imagedata url </Text>
         {imageDataURL && ( 
        <Image
          src={imageDataURL}
          style={{ width: '100%', height: 'auto' }}
        />
       )} 
      </View>
      </Page> */}

         {/* 
          <Text>Section #1</Text>
          <Text>Hello</Text>
          
          <View style={styles.section}>
            <Text>Section #2</Text>
          </View> */}









//  // alert(userid);
//       // const docRef = query(collection(db, `LoginData/${userid}/Recipes_user`));
//       // const docSnap = await getDocs(docRef);
//       alert(props.urecipeId);
//       let recipeidRef="",docSnap="";
//       for(var i=0;i<=props.urecipeId.length;i++)
//       {
//         recipeidRef = doc(collection(db,
//           `LoginData/${userid}/Recipes_user`),
//           "101201");
//           // `${props.urecipeId}`);
//           // `${props.urecipeId[i]}`);
//         docSnap = await getDoc(recipeidRef);
//         setUserecipebooks(...docSnap.data());
//         // docSnap.forEach((doc) => {
//           // console.log(doc.id);
//           // const rcoll=(collection(db,"Recipes"), where ("category", "==", category_name));
//           // onSnapshot(recipeidRef,snapshot=>{
//             // setUserecipebooks(snapshot.docs.map(doc1 =>{
//             //     return {
//             //         id:doc1.id,
//             //         // viewing:false,
//             //         ...doc1.data()
//             //     } 
//             // }))
//       //     }); 
//       // })
//       }